import Mappings, { IGNORE } from './SyntaxMapper';
function parse(html) {
    const parser = new DOMParser();
    const doc = parser.parseFromString(html, 'text/html');
    for (const [key, value] of Object.entries(Mappings)) {
        if (value === IGNORE) {
            const elements = doc.querySelectorAll(key);
            elements.forEach(el => el.remove());
        }
    }
    return doc.body.outerHTML;
}
export default async function converter(html) {
    const converter = new TurndownService();
    converter.use(turndownPluginGfm.gfm);
    return converter.turndown(parse(html));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29udmVydGVyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sUUFBUSxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbEQsU0FBUyxLQUFLLENBQUMsSUFBWTtJQUV2QixNQUFNLE1BQU0sR0FBYyxJQUFJLFNBQVMsRUFBRSxDQUFDO0lBRzFDLE1BQU0sR0FBRyxHQUFhLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBR2hFLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBRWpELElBQUksS0FBSyxLQUFLLE1BQU0sRUFBRTtZQUNsQixNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDM0MsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1NBQ3ZDO0tBQ0o7SUFFRCxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0FBQzlCLENBQUM7QUFHRCxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssVUFBVSxTQUFTLENBQUMsSUFBWTtJQUdoRCxNQUFNLFNBQVMsR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFDO0lBSXhDLFNBQVMsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFckMsT0FBTyxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzNDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTWFwcGluZ3MsIHsgSUdOT1JFIH0gZnJvbSAnLi9TeW50YXhNYXBwZXInO1xyXG5cclxuZnVuY3Rpb24gcGFyc2UoaHRtbDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIC8vIHVzZSB0aGUgRE9NUGFyc2VyIHRvIHBhcnNlIHRoZSBIVE1MXHJcbiAgICBjb25zdCBwYXJzZXI6IERPTVBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcclxuXHJcbiAgICAvLyBjcmVhdGUgYSBuZXcgZG9jdW1lbnQgZnJvbSB0aGUgSFRNTFxyXG4gICAgY29uc3QgZG9jOiBEb2N1bWVudCA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoaHRtbCwgJ3RleHQvaHRtbCcpO1xyXG5cclxuICAgIC8vIGxvb3Agb3ZlciBvdXIgc3ludGF4TWFwIHRvIHNlZSB3aGljaCBlbGVtZW50cyBuZWVkIHRvIGJlIHJlbW92ZWRcclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKE1hcHBpbmdzKSkge1xyXG4gICAgICAgIC8vIGdldCBhbGwgdGhlIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBiZSByZW1vdmVkXHJcbiAgICAgICAgaWYgKHZhbHVlID09PSBJR05PUkUpIHtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudHMgPSBkb2MucXVlcnlTZWxlY3RvckFsbChrZXkpO1xyXG4gICAgICAgICAgICBlbGVtZW50cy5mb3JFYWNoKGVsID0+IGVsLnJlbW92ZSgpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRvYy5ib2R5Lm91dGVySFRNTDtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGNvbnZlcnRlcihodG1sOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGNvbnN0IGNvbnZlcnRlciA9IG5ldyBUdXJuZG93blNlcnZpY2UoKTtcclxuXHJcbiAgICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgY29udmVydGVyLnVzZSh0dXJuZG93blBsdWdpbkdmbS5nZm0pO1xyXG5cclxuICAgIHJldHVybiBjb252ZXJ0ZXIudHVybmRvd24ocGFyc2UoaHRtbCkpO1xyXG59XHJcbiJdfQ==