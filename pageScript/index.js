import { styles } from './styles';
import elements from './domElements';
import HTMLtoMarkdown from '../converter';
import { addStylesToEl, removeStylesFromEl } from './uiHelpers';
const hasHTMLRegex = /<[^>]*>/;
const hasHTML = (text) => hasHTMLRegex.test(text);
export default () => {
    if (typeof document !== 'undefined') {
        document.addEventListener('DOMContentLoaded', () => {
            const { HTMLInput, resetButton, convertButton, convertedHTMLContainer, copyConvertedHTMLButton, convertedParentContainer } = elements();
            const showConvertedHTML = (convertedHTML) => {
                convertedHTMLContainer.innerHTML = convertedHTML;
                convertedParentContainer.classList.remove('hidden');
                copyConvertedHTMLButton.scrollIntoView();
                copyConvertedHTMLButton
                    .addEventListener('click', handleCopyClick);
                resetButton.addEventListener('click', handleResetClick);
            };
            const hideConvertedHTMLEl = () => {
                convertedHTMLContainer.innerHTML = '';
                convertedHTMLContainer.innerHTML = '';
                convertedParentContainer.classList.add('hidden');
                copyConvertedHTMLButton
                    .removeEventListener('click', handleCopyClick);
                resetButton.removeEventListener('click', handleResetClick);
            };
            const convertBtnValidInputReceived = (inputReceived) => {
                addStylesToEl(convertButton, styles.convertButton);
                convertButton.disabled = false;
                convertButton.addEventListener('click', (e) => handleConvertButtonClick(inputReceived, e));
            };
            const resetConvertBtn = (inputReceived) => {
                convertButton.disabled = true;
                removeStylesFromEl(convertButton, styles.convertButton);
                convertButton.removeEventListener('click', (e) => handleConvertButtonClick(inputReceived, e));
            };
            const handleCopyClick = (e) => {
                e.preventDefault();
                e.stopPropagation();
                const text = convertedHTMLContainer;
                text.select();
                text.setSelectionRange(0, 99999);
                navigator.clipboard.writeText(text.value);
            };
            const handleResetClick = (e) => {
                e.preventDefault();
                e.stopPropagation();
                HTMLInput.value = '';
                hideConvertedHTMLEl();
            };
            const handleConvertButtonClick = async (value, e) => {
                e.preventDefault();
                e.stopPropagation();
                const converted = await HTMLtoMarkdown(value);
                showConvertedHTML(converted);
            };
            const htmlInputManager = (event) => {
                const target = event.target;
                const value = target.value;
                if (hasHTML(value)) {
                    convertBtnValidInputReceived(value);
                }
                else {
                    resetConvertBtn(value);
                    hideConvertedHTMLEl();
                }
            };
            HTMLInput.addEventListener('input', htmlInputManager);
        });
    }
};
//# sourceMappingURL=data:application/json;base64,